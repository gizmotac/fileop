var materialvalue;
function getval(sel)
{
    // console.log(sel.value);
    materialvalue = sel.value;
}

if (window.FileReader) {
    var drop;
    var fileNumber = 0;
    addEventHandler(window, 'load', function() {
        drop = document.getElementById('drop1');

        function cancel(e) {
            if (e.preventDefault) {
                e.preventDefault();
            }
            return false;
        }

        // Tells the browser that we *can* drop on this target
        addEventHandler(drop, 'dragover', function(e) {
            e = e || window.event; // get window.event if e argument missing (in IE) 
            if (e.preventDefault) {
                e.preventDefault();
            }
            fileNumber = fileNumber + 1;
            $(".container").css("opacity", '0.3');
            $("#uploadicon").css("display", "block");

            return false;
        });
        // Tells the browser that we *can* drop on this target
        addEventHandler(drop, 'dragleave', function(e) {
            e = e || window.event; // get window.event if e argument missing (in IE) 
            if (e.preventDefault) {
                e.preventDefault();
            }
            fileNumber = fileNumber + 1;
            $(".container").css("opacity", '1');
            $("#uploadicon").css("display", "none");

            return false;
        });

        addEventHandler(drop, 'dragenter', cancel);


        addEventHandler(drop, 'drop', function(e) {
            e = e || window.event; // get window.event if e argument missing (in IE)   
            if (e.preventDefault) {
                e.preventDefault();
            } // stops the browser from redirecting off to the image.

            var dt = e.dataTransfer;
            var files = dt.files;
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                var reader = new FileReader();

                //attach event handlers here...  
                reader.readAsDataURL(file);

                addEventHandler(reader, 'loadend', function(e, file) {
                    var bin = this.result;
                    // console.log(file.name);
                    var formData = new FormData();
                    formData.append('file', file);
                    var filename = file.name;
                    // var filename = $('#f').val().replace(/C:\\fakepath\\/i, '');
                    // $("#result").text("");
                    $("#loading-bar-spinner").css("display", "block");
                    //get all form data 
                    const storedarray = window.localStorage.getItem('printqueue');
                    // console.log("STORED ARRAY");
                    // console.log(storedarray);
                    var namesarraystored = storedarray.split(",");
                    // console.log(namesarraystored);
                    var indexfound = namesarraystored.indexOf(filename);
                    // console.log("INDEX");
                    // console.log(indexfound);
                    var first = namesarraystored[0];

                    var filename = $.trim(filename).toString();
                    var first = $.trim(first).toString();
                    var trigger = 0;
                    // console.log("FIRST " + first);
                    // console.log("FILENAME " + filename);
                    var ext = filename.split('.')[1].toLowerCase();;
                    // console.log(ext);
                    var msgtext = "File already in queue!";
                    if (ext != "gcode") {
                        var trigger = 1;
                        var msgtext = "FIle ext. not accepted, needs to be *.gcode !!";

                    }

                    if (filename == first) {
                        var trigger = 1;
                        // console.log("MATCH");
                        var msgtext = "File already in queue!";
                    }

                    if (indexfound > 0 || trigger == 1) {
                        toastr.error(msgtext);
                        $("#data").trigger("reset");
                        $("#loading-bar-spinner").css("display", "none");
                        $("#drop1").css("background-color", 'white');
                        $(".container").css("opacity", '1');
                        $("#uploadicon").css("display", "none");
                    } else {


                        var confirmation = $.confirm({
                        icon: 'fa fa-info',
                        title: 'INPUT COPIES AND PRIORITY',
                        confirmButton: 'Go ahead',
                        cancelButton: 'Cancel',
                        content: '<label for="">Priority</label> <input id="prinputpopup" class="input-number" type="number" name="priority" data-value="" value="" min="0" max="9" data-min="0" data-max="9"> <br> <label for="">Copies</label> <input style="margin-top:10px;" id="copiputpopup" class="input-number" type="number" name="copies" data-value="" min="1" max="1000" data-min="1" data-max="1000"><select onchange="getval(this);" style="margin-top:10px; display:block;" name="filament" id="filament"> <option value="">-- select filament --</option> <option value="ABS">ABS</option> <option value="PLA">PLA</option> </select>',
                        buttons: {
                            confirm: function() {
                            var priority = $('#prinputpopup').val();
                            var copies = $('#copiputpopup').val();
                            var filament = $('#filament').val();
                            // console.log(priority);
                            // console.log(copies);
                            var url = "https://3dhr.eu.ngrok.io/files/upload/?priority=" + priority + "&copies=" + copies + "&filament=" + materialvalue + "&printer=Voron";
                                $.ajax({
                                    type: 'POST',
                                    enctype: 'multipart/form-data',
                                    url: url,
                                    data: formData,
                                    processData: false,
                                    contentType: false,
                                    mode: 'cors',
                                    cache: false,
                                    crossDomain: true,
                                    timeout: 600000,
                                    success: function(returndata) {
                                        var error = returndata['Error'];
                                        var upload_status = returndata['Upload status'];
                                        if (error) {
                                            toastr.error(error);
                                        } else {
                                            if (upload_status == null){ upload_status = "Uploaded !"}
                                            toastr.success(upload_status);
                                            $("#data").trigger("reset");
                                            $("#loading-bar-spinner").css("display", "none");
                                            $("#drop1").css("background-color", 'white');
                                            $(".container").css("opacity", '1');
                                            $("#uploadicon").css("display", "none");
                                            // var datatablenew = getTabledata(filename);
                                            // console.log(datatablenew);
                                            setTimeout(
                                                function() {
                                                    // console.log(datatablenew[0]);
                                                    // console.log(datatablenew[1]);
                                                    // $('#table').DataTable().row.add( {
                                                    // "title":       filename,
                                                    // "priority":   datatablenew[0],
                                                    // "copies":     datatablenew[1]
                                                    // }).draw(false);
                                                    namesarraystored.push(filename);
                                                    window.localStorage.setItem('printqueue', namesarraystored);

                                                }, 250);
                                            $('#table').DataTable().ajax.reload(null, false);

                                        }
                                    },
                                    error: function(e) {
                                        toastr.error("Connection Error");
                                        $("#data").trigger("reset");
                                        // console.log(e);
                                    }
                                });

                            },
                            cancel: function() {
                                // $.alert('Canceled!');
                                $("#uploadicon").css("display", "none");
                                $("#loading-bar-spinner").css("display", "none");
                                $(".container").css("opacity", "1");

                            }
                        }
                    });


                    }

                }.bindToEventHandler(file));
            }
            return false;
        });


        Function.prototype.bindToEventHandler = function bindToEventHandler() {
            var handler = this;
            var boundParameters = Array.prototype.slice.call(arguments);
            //create closure
            return function(e) {
                e = e || window.event; // get window.event if e argument missing (in IE)   
                boundParameters.unshift(e);
                handler.apply(this, boundParameters);
            }
        };
    });
} else {
    // document.getElementById('status').innerHTML = 'Your browser does not support the HTML5.';
}

function addFile(evt) {
    e = e || window.event; // get window.event if e argument missing (in IE)   
    if (e.preventDefault) {
        e.preventDefault();
    } // stops the browser from redirecting off to the image.

    var dt = e.dataTransfer;
    var files = dt.files;
    for (var i = 0; i < files.length; i++) {
        var file = files[i];
        var reader = new FileReader();

        //attach event handlers here...  
        reader.readAsDataURL(file);

        addEventHandler(reader, 'loadend', function(e, file) {
            var bin = this.result;
            // console.log(file.name);
            var formData = new FormData();
            formData.append('file', file);
            var filename = file.name;
            // var filename = $('#f').val().replace(/C:\\fakepath\\/i, '');
            // $("#result").text("");
            $("#loading-bar-spinner").css("display", "block");
            //get all form data  
            const storedarray = window.localStorage.getItem('printqueue');
            // console.log("STORED ARRAY");
            // console.log(storedarray);
            var namesarraystored = storedarray.split(",");
            // console.log(namesarraystored);
            var indexfound = namesarraystored.indexOf(filename);
            // console.log("INDEX");
            // console.log(indexfound);
            var first = namesarraystored[0];

            var filename = $.trim(filename).toString();
            var first = $.trim(first).toString();
            var trigger = 0;
            // console.log("FIRST " + first);
            // console.log("FILENAME " + filename);
            var ext = filename.split('.')[1].toLowerCase();;
            // console.log(ext);
            var msgtext = "Error";
            if (ext != "gcode") {
                var trigger = 1;
                var msgtext = "FIle ext. not accepted, needs to be *.gcode !!";

            }

            if (filename == first) {
                var trigger = 1;
                // console.log("MATCH");
                var msgtext = "File already in queue!";
            }


            if (indexfound > 0 || trigger == 1) {
                toastr.error(msgtext);
                toastr.error("File already in queue!");
                $("#data").trigger("reset");
                $("#loading-bar-spinner").css("display", "none");
                $("#drop1").css("background-color", 'white');
                $(".container").css("opacity", '1');
                $("#uploadicon").css("display", "none");
            } else {

                // var formData = new FormData($("form#data")[0]);
                var url = "https://3dhr.eu.ngrok.io/files/upload/?priority=0&copies=1&printer=Voron";
                $.ajax({
                    type: 'POST',
                    enctype: 'multipart/form-data',
                    url: url,
                    data: formData,
                    processData: false,
                    contentType: false,
                    mode: 'cors',
                    cache: false,
                    crossDomain: true,
                    timeout: 600000,
                    success: function(returndata) {
                        var error = returndata['Error'];
                        var upload_status = returndata['Upload status'];
                        if (error) {
                            toastr.error(error);
                        } else {
                            if (upload_status == null){ upload_status = "Uploaded !"}
                            toastr.success(upload_status);
                            $("#data").trigger("reset");
                            $("#loading-bar-spinner").css("display", "none");
                            $("#drop1").css("background-color", 'white');
                            $(".container").css("opacity", '1');
                            $("#uploadicon").css("display", "none");
                            // var datatablenew = getTabledata(filename);
                            // console.log(datatablenew);
                            setTimeout(
                                function() {
                                    // console.log(datatablenew[0]);
                                    // console.log(datatablenew[1]);
                                    // $('#table').DataTable().row.add( {
                                    // "title":       filename,
                                    // "priority":   datatablenew[0],
                                    // "copies":     datatablenew[1]
                                    // }).draw(false);
                                    namesarraystored.push(filename);
                                    window.localStorage.setItem('printqueue', namesarraystored);
                                }, 250);
                            $('#table').DataTable().ajax.reload(null, false);

                        }
                    },
                    error: function(e) {
                        toastr.error("Connection Error");
                        $("#data").trigger("reset");
                        // console.log(e);
                    }
                });
            }


        }.bindToEventHandler(file));
    }
    return false;
}

//seperate event
function addEventHandler(obj, evt, handler) {
    if(obj){
        if (obj.addEventListener) {
            // W3C method
            obj.addEventListener(evt, handler, false);
        } else if (obj.attachEvent) {
            // IE method.
            obj.attachEvent('on' + evt, handler);
        } else {
            // Old school method.
            obj['on' + evt] = handler;
        }
    }
}



function plus(element) {
    var value = $(element).closest("div").find("input[type='number']").val();
    var theel = $(element).closest("div").find("input[type='number']");
    // console.log("PLUS");
    // console.log(value);
    var att = element.data("id");
    var min = theel.data("min") || false;
    var max = theel.data('max') || false;
    value++;
    if(!max || value <= max) {
      theel.val(value++);
    }
}

function minus(element) {
    var value = $(element).closest("div").find("input[type='number']").val();
    var theel = $(element).closest("div").find("input[type='number']");
    // console.log("PLUS");
    // console.log(value);
    var att = element.data("id");
    var min = theel.data("min") || false;
    var max = theel.data('max') || false;
    value--;
    if(value >= min) {
      theel.val(value--);
    }
}

$(document).ready(function() {
    
    $(".logo").click(function(){
        window.location.replace('/');
    });

    if (history.scrollRestoration) {
        history.scrollRestoration = 'manual';
    } else {
        window.onbeforeunload = function () {
            window.scrollTo(0, 0);
        }
    }


    setInterval(function(){ 
        //this code runs every 30 seconds 
      if (document.visibilityState === 'visible') {
        $('#table').DataTable().ajax.reload(null, false);
        console.log('reload');
      }else{
         console.log('hidden');
      }
    }, 30000);

    setTimeout(function() {
        $('.reveal').css("opacity", "0");
        $('.reveal').css("height", "0");
        $('.reveal').css("margin", "0");
    }, 1000);
    setTimeout(function() {
        $('.main').css("opacity", "1");
        $('.container .card').css('display', 'flex');
    }, 1000);
    setTimeout(function() {
        $('.reveal').remove();
    }, 2500);


    var table = $('#table').DataTable({
        // data: jsonObj,
        ajax: {
            url: "https://3dhr.eu.ngrok.io/files",
            dataSrc: function(data) {
                jsonNames = [];
                jsonObj = [];

                $.each(data, function(name, value) {
                    item = {}
                    item["title"] = name;
                    item["priority"] = data[name]['priority'];
                    item["copies"] = data[name]['copies'];
                    item["printed"] = data[name]['printed'];
                    item["filament"] = data[name]['filament'];
                    jsonNames.push(name);
                    jsonObj.push(item);
                });

                window.localStorage.setItem('printqueue', jsonNames);
                var data = jsonObj;

                return data;
            },
            cache: false,
        },
        dom: 'Blfrtip',
        buttons: [{
            text: '<i class="fa fa-cloud-upload fa_custom fa-1x"></i> Upload',
            action: function(e, dt, node, config) {
                // alert( 'Button activated' );
                $('#file').trigger("click");
            }
        },{
            text: '<i class="fa fa-print fa_custom fa-1x"></i> Printers',
            action: function(e, dt, node, config) {
                // alert( 'Button activated' );
                window.location.replace('/printers');
            }
        }],
        fixedColumns: true,
        order: [
            [1, 'desc']
        ],
        columns: [{
                'className':"titlecolumn",
                'data': 'title'
            },
            { 'className':"priorityc",
               'data': 'priority', 
                render: function(data, type, row) { 
                if ( type === "sort" || type === 'type' ) {
                  return data;
                }else{
                var valuelink = row.title;
                return '<div class="popuppriority"> <input id="prinput'+row.title+'" class="input-number input-number-table" type="number" data-value="' + data + '" value="' + data + '" min="0" max="9" data-min="0" data-max="9"><span data-a="+" onClick="plus($(this))" class="input-number-increment" data-id="prinput'+row.title+'" >+</span> <span data-a="-" onClick="minus($(this))" class="input-number-decrement" data-id="prinput'+row.title+'" >–</span>  </div>';                 }
              } 
            },
            { 'className':"priority",
              'data': 'copies', 
                render: function(data, type, row) { 
                if ( type === "sort" || type === 'type' ) {
                  return data;
                }else{
                var valuelink = row.title;
                return '<div class="popupcopies"> <input id="cpinput'+row.title+'" class="input-number input-number-table copiesinp" type="number" data-value="' + data + '" value="' + data + '" min="1" max="1000" data-min="1" data-max="1000"> <span data-a="+" onClick="plus($(this))" class="input-number-increment" data-id="cpinput'+row.title+'">+</span> <span data-a="-" onClick="minus($(this))" data-id="cpinput'+row.title+'" class="input-number-decrement">–</span> </div>';         }              
              } 
            },
            {
                'data': 'printed'
            },
            {
                'data': 'filament'
            },
            {
                "data": 'actions',
                "bSortable": false,
                "mRender": function (data, type, row) { return '<div style="display:flex;"><button onClick="updatefile($(this))" class="tablebtn" style="margin-right:5px;" title="Update" id="copiesupdate-'+row.title+'"><i class="fa fa-refresh" aria-hidden="true"></i></button><button style="margin-left:5px;" onClick="deletefile($(this))" class="deletefile" data-link="https://3dhr.eu.ngrok.io/files/delete/name=' + row.title + '">' + 'Delete' + '</button></div>'; }
            },
        ],
        "createdRow": function( row, data, dataIndex ) {
              // console.log(data.title);
              var printed = data.printed;
              var copies = data.copies;
              if(printed == copies){
                data.priority = '-1';
                $(row).addClass( 'dimrow' );
              }
        }
    });



    $('#deleterow').click(function() {
        table.row('.selected').remove().draw(false);
        
    });
    
});






function arrayRemove(arr, value) {

    return arr.filter(function(ele) {
        return ele != value;
    });
}

function updatefile(element) {
 // 'http://127.0.0.1:8000/files/update/name=CE3_Part8.gcode?copies=20&priority=9' \
 console.log("Update Row");
 var getid = element.attr('id');
 var splitid = getid.split("-");
 var namefile = splitid[1];
 console.log(namefile);


 var cpid = 'cpinput' + namefile;
 var prid = 'prinput' + namefile;

 var copies = document.getElementById(cpid).value;
 var priority = document.getElementById(prid).value;
 var string = "https://3dhr.eu.ngrok.io/files/update/name=" + namefile + "?copies=" + copies + "&priority=" + priority + "&filament=PLA&printer=PrusaI3";


    $.confirm({
        icon: 'fa fa-warning',
        title: 'UPDATE ENTRY',
        content: 'updating PRIORITY to <b>' + priority + '</b> and COPIES to <b>' + copies + '</b>. Are you sure you want to proceed?',
        buttons: {
            confirm: function() {
              
                $.ajax({
                    type: 'PUT',
                    url: string,
                    data: false,
                    processData: false,
                    contentType: false,
                    mode: 'cors',
                    cache: false,
                    crossDomain: true,
                    timeout: 600000,
                    success: function(data, status) {

                        if(status != "success"){
                            toastr.error("Error updating file !");
                        }else{
                            // console.log("Data: " + data + "\nStatus: " + status);
                            $('#table').DataTable().ajax.reload(null, false);
                            // console.log(data);
                            toastr.success("File updated ");
                        }
                  
                    },
                    error: function(e) {
                        toastr.error("Error updating file !");
                    }
                });

            },
            cancel: function() {
                // $.alert('Canceled!');
            }
        }
    });
 
}

function deletefile(element) {
    // var link = $(this).data('link');
    var namefile = element.attr('data-link');
    var splitlinkone = namefile.split("=");
    var namefileli = splitlinkone[1];

    $.confirm({
        icon: 'fa fa-warning',
        title: 'DELETE ENTRY',
        content: 'Are you sure you want to remove <b>' + namefileli + '</b> from the printer queue?',
        buttons: {
            confirm: function() {
                // $.alert('Confirmed!');
                var link = element.attr('data-link');
                var filenamedata = element.attr('data-link');
                var splitlink = filenamedata.split("=");
                var filenamelink = splitlink[1];

                // console.log(filenamelink);
                $(element).closest('tr').addClass('selected');
                // console.log(link);
                // console.log(element);

                $.ajax({
                    type: 'DELETE',
                    // enctype: 'multipart/form-data',
                    url: link,
                    data: false,
                    processData: false,
                    contentType: false,
                    mode: 'cors',
                    cache: false,
                    crossDomain: true,
                    timeout: 600000,
                    success: function(returndata) {
                        var error = returndata['Error'];
                        var upload_status = returndata['event'];
                        if (error) {
                            toastr.error(error);
                        } else {
                            if (upload_status == null){ upload_status = "Deleted !"}
                            toastr.success(upload_status);
                            $("#data").trigger("reset");
                            $("#loading-bar-spinner").css("display", "none");
                            // $('#deleterow').trigger('click');
                            var storedarraydelete = window.localStorage.getItem('printqueue');
                            // console.log("STORED ARRAY DELETE");
                            // console.log(storedarraydelete);
                            var namesarraystored = storedarraydelete.split(",");
                            // console.log("TO REMOVE: " + filenamelink);
                            var result = arrayRemove(namesarraystored, filenamelink);
                            window.localStorage.setItem('printqueue', result);
                            // console.log("NEW ARRAY DELETE");
                            // console.log(window.localStorage.getItem('printqueue'));
                            $('#table').DataTable().ajax.reload(null, false);
                        }
                    },
                    error: function(e) {
                        toastr.error("Connection Error");
                        $("#data").trigger("reset");
                        // console.log(e);
                    }
                });

            },
            cancel: function() {
                // $.alert('Canceled!');
            }
        }
    });



}



$("#file").change(function() {
    //disable the default form action
    event.preventDefault();

    var confirmation = $.confirm({
        icon: 'fa fa-info',
        title: 'INPUT COPIES AND PRIORITY',
        confirmButton: 'Go ahead',
        cancelButton: 'Cancel',
        content: '<label for="">Priority</label> <input id="prinputpopup" class="input-number" type="number" name="priority" data-value="" value="" min="0" max="9" data-min="0" data-max="9"> <br> <label for="">Copies</label> <input style="margin-top:10px;" id="copiputpopup" class="input-number" type="number" name="copies" data-value="" min="1" max="1000" data-min="1" data-max="1000"><select onchange="getval(this);" style="margin-top:10px; display:block;" name="filament" id="filament"> <option value="">-- select filament --</option> <option value="ABS">ABS</option> <option value="PLA">PLA</option> </select>',
        buttons: {
            confirm: function() {
            var priority = $('#prinputpopup').val();
            var copies = $('#copiputpopup').val();
            var filament = $('#filament').val();
            // var filament = $('#filament').find(":selected").text();
            // console.log(priority);
            // console.log(copies);
            // console.log(priority);
            // console.log(copies);
            var filename = $('#file').val().replace(/C:\\fakepath\\/i, '');
            // $("#result").text("");
            $("#loading-bar-spinner").css("display", "block");
            const storedarray = window.localStorage.getItem('printqueue');
            // console.log("STORED ARRAY");
            // console.log(storedarray);
            var namesarraystored = storedarray.split(",");
            // console.log(namesarraystored);
            var indexfound = namesarraystored.indexOf(filename);
            // console.log("INDEX");
            // console.log(indexfound);
            var first = namesarraystored[0];
            var filename = $.trim(filename).toString();
            var first = $.trim(first).toString();
            var trigger = 0;
            // console.log("FIRST " + first);
            // console.log("FILENAME " + filename);

            if (filename == first) {
                var trigger = 1;
                // console.log("MATCH");
            }


            if (indexfound > 0 || trigger == 1) {
                toastr.error("File already in queue!");
                $("#data").trigger("reset");
                $("#loading-bar-spinner").css("display", "none");
            } else {

                //get all form data  
                var formData = new FormData($("form#data")[0]);
                var url = "https://3dhr.eu.ngrok.io/files/upload/?priority=" + priority + "&copies=" + copies + "&filament=" + materialvalue + "&printer=Voron";

                $.ajax({
                    type: 'POST',
                    enctype: 'multipart/form-data',
                    url: url,
                    data: formData,
                    processData: false,
                    contentType: false,
                    mode: 'cors',
                    cache: false,
                    crossDomain: true,
                    timeout: 600000,
                    success: function(returndata) {
                        var error = returndata['Error'];
                        var upload_status = returndata['Upload status'];
                        if (error) {
                            toastr.error(error);
                        } else {
                            if (upload_status == null){ upload_status = "Uploaded !"}
                            toastr.success(upload_status);
                            $("#data").trigger("reset");
                            $("#loading-bar-spinner").css("display", "none");
                            fileList = [];
                            // var datatablenew = getTabledata(filename);
                            // console.log(datatablenew);
                            setTimeout(
                                function() {
                                    // $('#table').DataTable().row.add( {
                                    // "title":       filename,
                                    // "priority":   datatablenew[0],
                                    // "copies":     datatablenew[1]
                                    // }).draw(false);
                                    namesarraystored.push(filename);
                                    window.localStorage.setItem('printqueue', namesarraystored);
                                }, 250);
                            $('#table').DataTable().ajax.reload(null, false);
                            confirmation.close();

                        }
                    },
                    error: function(e) {
                        toastr.error("Connection Error");
                        $("#data").trigger("reset");
                        // console.log(e);
                    }
                });

                return false;
            }

                },
            cancel: function() {
                // $.alert('Canceled!');
            }
        }
    });


});